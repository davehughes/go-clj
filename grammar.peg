{
// Go code goes here...

}


Input <- forms:Form* EOF {
    return forms, nil
}

Form <- _ form:( LineComment / List / Lambda / Vector / Set / Map / 
            QuotedForm / AtomDeref / Numeric / Symbol / Keyword / String
            ) _ {
    // fmt.Printf("Form: %v\n", form) 
    return form, nil
}

EOF = !.
EOL <- LineComment? ( "\r\n" / "\n\r" / "\r" / "\n" / EOF)
_ "whitespace" <- [ \n\t\r,]*

LineComment <- _? ';' comment:[^\r\n]* {
    return &Comment{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        Value: fmt.Sprint(comment),
        }, nil
}

List <- '(' forms:Form* ')' {
    return &List{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        Forms: forms.([]interface{}),
        }, nil
}
 
Vector <- '[' forms:Form* ']' {
    return &Vector{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        Forms: forms.([]interface{}),
        }, nil
}

Map <- '{' forms:Form* '}' {
    numForms := len(forms.([]interface{}))
    if numForms % 2 != 0 {
        return nil, ErrOddNumberOfMapForms
    }
    return &Map{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        Forms: forms.([]interface{}),
        }, nil
}

Set <- '#' '{' forms:Form* '}' {
    return &Set{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        Forms: forms.([]interface{}),
        }, nil
}

Lambda <- '#' '(' forms:Form* ')' {
    return &Lambda{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        Forms: forms.([]interface{}),
    }, nil
}

AtomDeref <- "@" form:Form {
    return &List{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        Forms: []interface{}{
            &Symbol{
                Name: "deref",
            },
            form,
        },
    }, nil
}

Keyword <- ( NamespacedKeyword / BareKeyword)

NamespacedKeyword <- ':' ':' sym:Symbol {
    return &Keyword{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        Name: (sym.(*Symbol)).Name,
        Namespace: "TODO: namespaced",
    }, nil
}

BareKeyword <- ':' sym:Symbol {
    return &Keyword{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        Name: (sym.(*Symbol)).Name,
    }, nil
}

Symbol <- [a-z0-9-+*?!&^%#?<>%/\\]i+ {
    pos := Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset}
    switch string(c.text) {
    case "nil":
        return &Nil{Position: pos}, nil
    case "true":
        return &True{Position: pos}, nil
    case "false":
        return &False{Position: pos}, nil
    default:
        return &Symbol{
            Position: pos,
            Name: string(c.text),
        }, nil
    }
}

QuotedForm <- ( "'" ) form:Form {
    return &List{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        Forms: []interface{}{
            &Symbol{
                Name: "quote",
            },
            form,
        },
    }, nil
}

String <- '"' value:[^"]* '"' {
    return &String{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        Value: string(c.text),
    }, nil
}

Numeric <- ( SciNot / Float /Integer )

SciNotSuffix <- [eE] Integer

SciNot <- coefficient:( Float / Integer ) exponent:SciNotSuffix {
    fl := fmt.Sprintf("(sci-not %s :exponent %s)", coefficient, exponent)
    fmt.Println(fl)
    return fl, nil
}

Float <- '-'? [0-9]+ '.' [0-9]+ {
    value, err := strconv.ParseFloat(string(c.text), 64)
    if err != nil {
        panic(err)
    }
    return &Float{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        ParsedValue: string(c.text),
        Value: value,
    }, nil
}

Integer <- '-'? [0-9]+ {
    value, err := strconv.ParseInt(string(c.text), 0, 64)
    if err != nil {
        panic(err)
    }
    return &Integer{
        Position: Position{Line: c.pos.line, Column: c.pos.col, Offset: c.pos.offset},
        ParsedValue: string(c.text),
        Value: value,
    }, nil
}
